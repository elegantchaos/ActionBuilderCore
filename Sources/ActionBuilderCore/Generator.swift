// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  Created by Sam Deane on 19/02/20.
//  All code (c) 2020 - present day, Elegant Chaos Limited.
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

import Foundation

public class Generator {
  let name: String
  let version: String
  let link: String

  public init(name: String, version: String, link: String) {
    self.name = name
    self.version = version
    self.link = link
  }

  /// Returns the content of a Workflow.yml file for the given repo.
  public func workflow(for repo: Repo) -> String {
    let compilers = repo.compilersToTest
    let platforms = repo.enabledPlatforms

    var source =
      """
      # --------------------------------------------------------------------------------
      # This workflow was automatically generated by \(name) \(version).
      # (see \(link) for more details)
      # --------------------------------------------------------------------------------

      name: \(repo.workflow)

      on: [push, pull_request]

      jobs:

      """

    var xcodePlatforms: [Platform] = []
    let configurations = repo.enabledConfigs
    for platform in platforms {
      if platform.needsDestination {
        xcodePlatforms.append(platform)
      } else {
        source.append(platform.yaml(repo: repo, compilers: compilers, configurations: configurations))
      }
    }

    if xcodePlatforms.count > 0 {
      let name = xcodePlatforms.map({ $0.name }).joined(separator: "/")
      let xcodePlatform = Platform(.xcode, name: name, subPlatforms: xcodePlatforms)
      source.append(xcodePlatform.yaml(repo: repo, compilers: compilers, configurations: configurations))
    }

    return source
  }

  /// Generates text to use for a README.md header for the given repo.
  public func header(for repo: Repo) -> (String, String) {
    let platforms = repo.enabledPlatforms
    let compilers = repo.enabledCompilers

    var header = ""
    let headerDelimiter = "<!-- End of \(name) Header -->\n\n"
    if repo.header {
      let platformNames = platforms.map({ $0.name }).joined(separator: ", ")
      let platformIDs = platforms.map({ $0.name })
      let swiftBadges = compilers.map({ "![swift \($0.short) shield]" }).joined(separator: " ")
      let swiftShields = compilers.map({ "[swift \($0.short) shield]: \(ImageShield.imgShieldURL(for: repo, compiler: $0)) \"Swift \($0.short)\"" }).joined(
        separator: "\n")

      header += """
        <!-- Header Generated by \(name) \(version) -->
        <!-- See \(link) for more details. -->

        [![Test results][tests shield]][actions] [![Latest release][release shield]][releases] [\(swiftBadges)][swift] ![Platforms: \(platformNames)][platforms shield]

        [release shield]: \(ImageShield.imgShieldURL(for: repo, type: .release))
        [platforms shield]: \(ImageShield.imgShieldURL(for: repo, platforms: platformIDs)) "\(platformNames)"
        [tests shield]: \(GitHub.githubURL(for: repo, location: .badge("")))
        \(swiftShields)

        [swift]: https://swift.org
        [releases]: \(GitHub.githubURL(for: repo, location: .releases))
        [actions]: \(GitHub.githubURL(for: repo, location: .actions))

        \(headerDelimiter)
        """
    }

    return (header, headerDelimiter)
  }
}
